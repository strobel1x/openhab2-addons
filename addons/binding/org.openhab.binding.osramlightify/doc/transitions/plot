#!/bin/bash


do_plot() {
	nlines="$1"
	title="$2"
	initial="$3"

	[[ -s "$initial.data" ]] || return

#	echo "$title"
#	echo "$outfile"
#	cat "$infile"
#	echo
#	return

	title="${title//_/\\\\_}"
	title="${title//^/\\\\^}"

	>> "$initial.data"
	>> "$initial.tick"
	>> "$initial.ntick"
	>> "$initial.mark"

	gnuplot -e "\
		set terminal png background 'white' size 900,$(( 400 + 10 * $nlines )) font 'Courier,11'; \
		set output '$initial.png'; \
		set xlabel 'Time'; \
		set xdata time; \
		set timefmt '%Y-%m-%d %H:%M:%S'; \
		set format x '%.3S'; \
		set autoscale x; \
		set yrange [0:280]; \
		set title \"$title\"; \
		set datafile separator ','; \
		plot \
			'$initial.data' using 1:2 with lines linecolor 'red' title 'Red', \
			'' using 1:3 with lines linecolor 'green' title 'Green', \
			'' using 1:4 with lines linecolor 'blue' title 'Blue', \
			'' using 1:5 with lines linecolor 'gold' title 'Luminance', \
			'' using 1:6 with lines linecolor 'orange' title 'Temperature', \
			'$initial.ntick' using 1:2:3:4 with yerrorbars linecolor '#ffe5e5' title 'Failed queries', \
			'$initial.tick' using 1:2:3:4 with yerrorbars linecolor 'grey90' title 'State queries', \
			'$initial.mark' using 1:2:3:4 with yerrorbars linecolor 'grey70' title 'Commands'"
}


for file in "$@"; do
	title=
	declare -i nlines=0
	initial=
	colourTransition=
	luminanceTransition=

	while read logline; do
		if [[ "$logline" =~ ([^[]*)\ \[.*,\ Command\ =\ ([^,]+),.*Address\ =\ ([^,]*),.*Transition\ =\ ([0-9]+ms),\ (.*) ]]; then
			echo "$logline"

			if [[ "${BASH_REMATCH[4]}" != '0ms' ]]; then
				if [[ "${BASH_REMATCH[2]}" == 'SET_LUMINANCE' ]]; then
					luminanceTransition=1
				else
					colourTransition=1
				fi
			fi

			thistitle=$( printf "%-80s" "${BASH_REMATCH[1]}: ${BASH_REMATCH[2]} ${BASH_REMATCH[5]} in ${BASH_REMATCH[4]}" )
			if [[ -e "$initial.mark" ]]; then
				title="$title\\n$thistitle"
				let nlines++
				echo "${BASH_REMATCH[1]},0,0,280" >> "$initial.mark"
			else
				title="${BASH_REMATCH[3]}\\n$thistitle"
				let nlines=1
				initial="${BASH_REMATCH[1]}"
			fi
		elif [[ "$logline" =~ -\ (.*):\ (([^ ]+)\ transition\ complete|OFFLINE) ]]; then
			echo "$logline"

			if [[ "${BASH_REMATCH[2]}" == 'OFFLINE' ]]; then
				colourTransition=
				luminanceTransition=
			elif [[ "${BASH_REMATCH[3]}" == 'luminance' ]]; then
				luminanceTransition=
			else
				colourTransition=
			fi

			if [[ -z "$colourTransition" && -z "$luminanceTransition" ]]; then
				echo "do plot"

				do_plot $nlines "$title" "$initial"

#				rm -f "$initial".{data,ntick,tick,mark}
				title=
				initial=
			fi
		elif [[ -n "$initial" && "$logline" =~ ([^[]*)\ \[.*\ -\ (.*):\ reachability\ = ]]; then
			echo "${BASH_REMATCH[1]},0,0,280" >> "$initial.ntick"
		elif [[ -n "$initial" && "$logline" =~ ([^[]*)\ \[.*\ -\ (.*):\ TRANSITION\ (.*) ]]; then
			data="${BASH_REMATCH[3]}"
			temp="${data##* }"
			data="${data% *}"
			data="${data// /,}"

			if [[ ! -e "$inital.mark" ]]; then
				echo "$initial,0,0,280" >> "$initial.mark"
			fi

			# Scale temp to (about) 0-255. We only really care about the slope
			# not the absolute value and we want it on the same graph as RGB
			# and luminance.
			temp=$(( ( 255 * $temp ) / 6600 ))

			echo "${BASH_REMATCH[1]},0,0,280" >> "$initial.tick"
			echo "${BASH_REMATCH[1]},$data,$temp" >> "$initial.data"
		fi
	done < "$file"
done
